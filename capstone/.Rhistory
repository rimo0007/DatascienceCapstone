shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
print("kl","k")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('F:/R_Coding/Developing Data Products/CourseProject')
shiny::runApp()
nextWordPrediction <- function(wordCount, text){
## If number of words is equal or more than 3, then just take the last 3 words.
if (wordCount >= 3) {
text <- text[(wordCount-2):wordCount]
# Predict using quadgrams
wordPrediction <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][1,]$quad)
wordPrediction2 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][2,]$quad[2])
wordPrediction3 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][3,]$quad[3])
# If no prediction, then back-off to predict using trigrams.
if (is.na(wordPrediction)) {
return (nextWordPrediction(2,text[2:3]))
}
}
# Predict using trigrams
if (wordCount == 2) {
wordPrediction <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][1,]$tri)
wordPrediction2 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][2,]$tri)
wordPrediction3 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][3,]$tri)
# If no prediction, then back-off to predict using bigrams
if (is.na(wordPrediction)) {
return (nextWordPrediction(1,text[3:3]))
}
}
# Predict using bigrams
if (wordCount == 1) {
wordPrediction <- as.character(bi[bi$uni==text[1],][1,]$bi)
wordPrediction2 <- as.character(bi[bi$uni==text[1],][2,]$bi)
wordPrediction3 <- as.character(bi[bi$uni==text[1],][3,]$bi)
}
if (wordCount == 0) {
wordPrediction <- NA
}
c(wordPrediction,wordPrediction2,wordPrediction3)
}
some_text = "I am!!!"
cleanText <- clean.text(some_text)
cleanText
nextWordPrediction(2,cleanText)
nextWordPrediction <- function(wordCount, text){
## If number of words is equal or more than 3, then just take the last 3 words.
if (wordCount >= 3) {
text <- text[(wordCount-2):wordCount]
# Predict using quadgrams
wordPrediction <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][1,]$quad)
wordPrediction2 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][2,]$quad[2])
wordPrediction3 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][3,]$quad[3])
# If no prediction, then back-off to predict using trigrams.
if (is.na(wordPrediction)) {
return (nextWordPrediction(2,text[2:3]))
}
}
# Predict using trigrams
if (wordCount == 2) {
wordPrediction <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][1,]$tri)
wordPrediction2 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][2,]$tri)
wordPrediction3 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][3,]$tri)
# If no prediction, then back-off to predict using bigrams
if (is.na(wordPrediction)) {
return (nextWordPrediction(1,text[3:3]))
}
}
# Predict using bigrams
if (wordCount == 1) {
wordPrediction <- as.character(bi[bi$uni==text[1],][1,]$bi)
wordPrediction2 <- as.character(bi[bi$uni==text[1],][2,]$bi)
wordPrediction3 <- as.character(bi[bi$uni==text[1],][3,]$bi)
}
if (wordCount == 0) {
wordPrediction <- NA
}
list(wordPrediction,wordPrediction2,wordPrediction3)
}
nextWordPrediction(2,cleanText)
nextWordPrediction <- function(wordCount, text){
## If number of words is equal or more than 3, then just take the last 3 words.
if (wordCount >= 3) {
text <- text[(wordCount-2):wordCount]
# Predict using quadgrams
wordPrediction <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][1,]$quad)
wordPrediction2 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][2,]$quad[2])
wordPrediction3 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][3,]$quad[3])
# If no prediction, then back-off to predict using trigrams.
if (is.na(wordPrediction)) {
return (nextWordPrediction(2,text[2:3]))
}
}
# Predict using trigrams
if (wordCount == 2) {
wordPrediction <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][1,]$tri)
wordPrediction2 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][2,]$tri)
wordPrediction3 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][3,]$tri)
# If no prediction, then back-off to predict using bigrams
if (is.na(wordPrediction)) {
return (nextWordPrediction(1,text[3:3]))
}
}
# Predict using bigrams
if (wordCount == 1) {
wordPrediction <- as.character(bi[bi$uni==text[1],][1,]$bi)
wordPrediction2 <- as.character(bi[bi$uni==text[1],][2,]$bi)
wordPrediction3 <- as.character(bi[bi$uni==text[1],][3,]$bi)
}
if (wordCount == 0) {
wordPrediction <- NA
}
c(wordPrediction,wordPrediction2,wordPrediction3)
}
nextWordPrediction(2,cleanText)
nextWordPrediction(2,cleanText)[1]
nextWordPrediction(2,cleanText)[2]
library(tm)
shiny::runApp()
shiny::runApp()
shiny::runApp()
bi <- readRDS('./data/bi.rds')
head(bi)
tri <- readRDS('./data/tri.rds')
head(tri)
quad<- readRDS('./data/quad.rds')
head(quad)
quad<- readRDS('./data/quad.rds')
head(quad)
quad<- readRDS('./data/quad.rds')
head(quad)
names(quad)<- ("uni", "bi","tri","quad","count")
names(quad)<- c("uni", "bi","tri","quad","count")
head(quad)
saveRDS(quad, file = "quad.rds")
quad<- readRDS('./data/quad.rds')
head(quad)
quad<- readRDS('F:/R_Coding/DataScienceCapstoneUI/capstone/data/quad.rds')
head(quad)
quad<- readRDS('F:/R_Coding/DataScienceCapstoneUI/capstone/data/quad.rds')
head(quad)
quad<- readRDS('F:/R_Coding/DataScienceCapstone/quad.rds')
quad
head(quad)
names(quad)<- c("uni", "bi","tri","quad","count")
head(quad)
saveRDS(quad, file = "quad.rds")
quad<- readRDS('quad.rds')
head(quad)
saveRDS(quad, file = "F:/R_Coding/DataScienceCapstone/quad.rds")
quad<- readRDS('F:/R_Coding/DataScienceCapstone/quad.rds')
head(quad)
quad<- readRDS('F:/R_Coding/DataScienceCapstoneUI/capstone/data/quad.rds')
head(quad)
tri <- readRDS('./data/tri.rds')
head(tri)
bi <- readRDS('./data/bi.rds')
head(bi)
load("F:/R_Coding/DataScienceCapstone/tri_naiveBayes.RData")
tri_naiveBayes
load("F:/R_Coding/DataScienceCapstone/df_trigram.RData")
head(df_trigram.)
head(df_trigram)
View(df_trigram.)
df
df_trigram
View(df_trigram)
library(e1071)
tri <- readRDS('./data/tri.rds')
tri_naiveBayes <- naiveBayes(tri ~  uni+ bi ,tri )
shiny::runApp()
load("df_trigram.RData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kalyannandi', token='2FA18A46497A08A00E675FAF20472979', secret='KOjovCQeKDQ5UIknklSBt1ku5DKvqWfNgW8kjhQ7')
library(rsconnect)
devtools::install_github('rstudio/rsconnect')
shinyapps::setAccountInfo(name='kalyannandi', token='2FA18A46497A08A00E675FAF20472979', secret='KOjovCQeKDQ5UIknklSBt1ku5DKvqWfNgW8kjhQ7')
shinyapps::setAccountInfo(name='kalyannandi', token='2FA18A46497A08A00E675FAF20472979', secret='KOjovCQeKDQ5UIknklSBt1ku5DKvqWfNgW8kjhQ7')
deploy
library(shinyapps)
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone')
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone/')
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone')
shinyapps::setAccountInfo(name='kalyannandi', token='2FA18A46497A08A00E675FAF20472979', secret='KOjovCQeKDQ5UIknklSBt1ku5DKvqWfNgW8kjhQ7')
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone')
shinyapps::setAccountInfo(name='kalyannandi', token='2FA18A46497A08A00E675FAF20472979', secret='KOjovCQeKDQ5UIknklSBt1ku5DKvqWfNgW8kjhQ7')
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone')
library(tm)
shiny::runApp()
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone')
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone',,account='kalyannandi')
library(tm)
library(stringr)
library(stylo)
## Load the data./data/
uni <- readRDS('./data/uni.rds')
bi <- readRDS('./data/bi.rds')
tri <- readRDS('./data/tri.rds')
quad<- readRDS('./data/quad.rds')
clean.text <- function(x, lowercase=TRUE, numbers=TRUE, punctuation=TRUE, spaces=TRUE)
{
# x: character string
# lower case
if (lowercase)
x = tolower(x)
# remove numbers
if (numbers)
x = gsub("[[:digit:]]", "", x)
# remove punctuation symbols
if (punctuation)
x = gsub("[[:punct:]]", "", x)
# remove extra white spaces
if (spaces) {
x = gsub("[ \t]{2,}", " ", x)
x = gsub("^\\s+|\\s+$", "", x)
}
# return
cleanText <- txt.to.words.ext(x, language="English.all",  preserve.case = TRUE)
cleanText
}
some_text = "It is "
cleanText <- clean.text(some_text)
wordPrediction<-as.character()
wordPrediction2<-as.character()
wordPrediction3<-as.character()
nextWordPrediction <- function(wordCount, text){
## If number of words is equal or more than 3, then just take the last 3 words.
if (wordCount >= 3) {
text <- text[(wordCount-2):wordCount]
# Predict using quadgrams
wordPrediction <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][1,]$quad)
wordPrediction2 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][2,]$quad[2])
wordPrediction3 <- as.character(quad[quad$uni==text[1] & quad$bi==text[2] & quad$tri==text[3],][3,]$quad[3])
# If no prediction, then back-off to predict using trigrams.
if (is.na(wordPrediction)) {
return (nextWordPrediction(2,text[2:3]))
}
}
# Predict using trigrams
if (wordCount == 2) {
wordPrediction <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][1,]$tri)
wordPrediction2 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][2,]$tri)
wordPrediction3 <- as.character(tri[tri$uni==text[1] &  tri$bi==text[2],][3,]$tri)
# If no prediction, then back-off to predict using bigrams
if (is.na(wordPrediction)) {
return (nextWordPrediction(1,text[3:3]))
}
}
# Predict using bigrams
if (wordCount == 1) {
wordPrediction <- as.character(bi[bi$uni==text[1],][1,]$bi)
wordPrediction2 <- as.character(bi[bi$uni==text[1],][2,]$bi)
wordPrediction3 <- as.character(bi[bi$uni==text[1],][3,]$bi)
}
if (wordCount == 0) {
wordPrediction <- "It is Noun"
}
c(wordPrediction,wordPrediction2,wordPrediction3)
}
nextWordPrediction(3,cleanText)
nextWordPrediction(2,cleanText[1:2])
#if(is.na(nextWordPrediction(3,cleanText)[1]) && is.na(nextWordPrediction(3,cleanText)[2]) && is.na(nextWordPrediction(3,cleanText)[3])){
# nextWordPrediction(2,cleanText[1:2])
#}
nextWordPrediction(3,cleanText)
nextWordPrediction(2,cleanText)
prev <- nextWordPrediction(2,cleanText)
prev1<-prev
prev1
some_text = "It is rajna"
cleanText <- clean.text(some_text)
prev <- nextWordPrediction(2,cleanText)
prev
prev <- nextWordPrediction(3,cleanText)
prev
prev1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
prev1<<--prev
prev1<<-prev
prev1
prev <- nextWordPrediction(3,cleanText)
prev
prev <- nextWordPrediction(3,cleanText)
if(is.na(prev)[1]){
print(prev1)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
test.env <- new.env()
assign('var', 100, envir=test.env)
test.env$var <- 100
get('var')
get('var', envir=test.env)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
k<- c("1","2")
k
is.na(k)
is.na(k)[1]
k<- c()
is.na(k)[1]
na(k)[1]==NULL
k[1]==NULL
if(k[1]==NULL)
print "k"
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone',account='kalyannandi')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
uni <- readRDS('./data/uni.rds')
head(uni)
shiny::runApp()
as.character(uni[uni$uni==text[1],][1,]$uni)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(uni)
View(uni)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('F:/R_Coding/DataScienceCapstoneUI/capstone',account='kalyannandi')
shiny::runApp()
---
CapstonePresentation
First Slide
